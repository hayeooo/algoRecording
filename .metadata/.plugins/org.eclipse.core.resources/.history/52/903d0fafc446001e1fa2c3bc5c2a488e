package algo_2023_08_30;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.StringTokenizer;

/*
 * BOJ 2589: 보물섬
 * 보물섬 지도 내 L에 해당하는 위치에서 출발하는 BFS(최단 거리로 이동)에서 가장 긴 시간을 구한다.
 */
public class BOJ_2589_보물섬_김하연 {
	static BufferedReader br;
	static StringTokenizer st;
	
	static int height;					// 보물 지도의 세로 크기
	static int width;					// 보물 지도의 가로 크기
	static char[][] map;				// 보물 지도
	
	public static void main(String[] args) throws IOException {
		
		br=new BufferedReader(new InputStreamReader(System.in));
		
		// 지도의 세로, 가로 크기 입력 받는다.
		st=new StringTokenizer(br.readLine().trim());
		height=Integer.parseInt(st.nextToken());
		width=Integer.parseInt(st.nextToken());
		
		// 보물 지도를 입력받는다.
		map=new char[height][width];
		for (int row=0;row<height;row++) {
			String line=br.readLine().trim();
			for (int col=0;col<width;col++) {
				map[row][col]=line.charAt(col);
			}
		}
		
		// L 위치에서 BFS를 시작한다.
		for (int row=0;row<height;row++) {
			for (int col=0;col<width;col++) {
				if (map[row][col]=='L') {
					bfs(row,col);
				}
			}
		}
	

	}
	
	public static void bfs(int x,int y) {
		Deque<int[]> que=new ArrayDeque<>();
		int[][] visited=new int[height][width];
		
		que.offer(new int[] {x,y});
		visited[x][y]=0;
		int maxDist=0;
		
		while (!que.isEmpty()) {
			
			// 4 방향으로 탐색할 수 있다면
			// 이동할 거리가 있다는 의미로, 거리를 1 추가한다.
			
		}
	}

}
